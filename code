import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
stocks = ['GOOG', 'AAPL', 'MSFT', 'AMZN'] 
start = '2012-01-01'
end = '2022-12-21'

# Create an empty dictionary to store data for each stock
data = {}

# Download data for each stock
for stock in stocks:
    data[stock] = yf.download(stock, start=start, end=end)
    data[stock].reset_index(inplace=True)
plt.figure(figsize=(12, 8))

for stock in stocks:
    plt.plot(data[stock]['Date'], data[stock]['Close'], label=stock)

plt.xlabel('Date')
plt.ylabel('Closing Price')
plt.title('Stock Price Comparison')
plt.legend()
plt.show()
from google.colab import drive
drive.mount('/content/drive')
data
import yfinance as yf

stocks = ['GOOG', 'AAPL', 'MSFT', 'AMZN']
start = '2012-01-01'
end = '2022-12-21'

data = {}
for stock in stocks:
    data[stock] = yf.download(stock, start=start, end=end)
    data[stock].reset_index(inplace=True)

for stock in stocks:
    mean_close = data[stock]['Close'].mean()
    print(f"Mean closing price for {stock}: {mean_close}")
plt.figure(figsize=(12, 8))  # Adjust figure size if needed

for stock in stocks:
    plt.plot(data[stock]['Date'], data[stock]['Close'], label=stock)

plt.xlabel('Date')
plt.ylabel('Closing Price')
plt.title('Stock Price Comparison')
plt.legend()
plt.grid(True)  # Add a grid for better readability
plt.show()
ma_200_days = data.Close.rolling(200).mean()
plt.figure(figsize=(8,6))
plt.plot(ma_100_days, 'r')
plt.plot(ma_200_days,'b')
plt.plot(data.Close,'g')
plt.show()
data.dropna(inplace=True)
data_train = pd.DataFrame(data.Close[0: int(len(data)*0.80)])
data_test = pd.DataFrame(data.Close[int(len(data)*0.80): len(data)])
data_train.shape[0]
data_test.shape[0]
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))
data_train_scale = scaler.fit_transform(data_train)
x = []
y = []

for i in range(100, data_train_scale.shape[0]):
    x.append(data_train_scale[i-100:i])
    y.append(data_train_scale[i,0])
x, y = np.array(x), np.array(y)
from keras.layers import Dense, Dropout, LSTM
from keras.models import Sequential
model = Sequential()
model.add(LSTM(units = 50, activation = 'relu', return_sequences = True,
               input_shape = ((x.shape[1],1))))
model.add(Dropout(0.2))
model.add(LSTM(units = 60, activation='relu', return_sequences = True))
model.add(Dropout(0.3))
model.add(LSTM(units = 80, activation = 'relu', return_sequences = True))
model.add(Dropout(0.4))
model.add(LSTM(units = 120, activation = 'relu'))
model.add(Dropout(0.5))
model.add(Dense(units =1))
model.compile(optimizer = 'adam', loss = 'mean_squared_error')
model.fit(x,y, epochs = 50, batch_size =32, verbose =1)
model.summary()
pas_100_days = data_train.tail(100)
data_test = pd.concat([pas_100_days, data_test], ignore_index=True)
data_test_scale  =  scaler.fit_transform(data_test)
x = []
y = []

for i in range(100, data_test_scale.shape[0]):
    x.append(data_test_scale[i-100:i])
    y.append(data_test_scale[i,0])
x, y = np.array(x), np.array(y)
y_predict = model.predict(x)
scale =1/scaler.scale_
y_predict = y_predict*scale
y = y*scale
plt.figure(figsize=(10,8))
plt.plot(y_predict, 'r', label = 'Predicted Price')
plt.plot(y, 'g', label = 'Original Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()
model.save('Stock Predictions Model.keras')
